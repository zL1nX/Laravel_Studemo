# Laravel_Stu_Demo

## 仿照写的小项目

- 学生信息管理系统
- [参考链接](https://github.com/rrylee/StuGradeWithLaravel5)
- [自己的链接](https://github.com/zL1nX/Laravel_Studemo)
- laravel版本5.0.22
- 分为管理员和学生部分，能够编辑信息，上传分数，修改分数，增加学生等功能

## 过程

### 数据库的构建

- 这部分实际操作了一下laravel中自带的数据迁移的功能，很好很强大
- 首先我们先想，需要一个大概什么样子的数据库及数据表呢？那么我们首先通过artisan创建出来一个数据迁移文件，作为我们的模板。这下有了模板我们肯定还需要具体的数据，这就是seed功能给我们的便利，我们编辑具体的seed文件，同样再次通过artisan将数据填充到数据表里。这样一来我们就可以十分方便的构造庞大的数据库而无需记忆繁琐的sql语句。
- 命令
  - `php artisan make:migration create_users_table`（得到数据迁移文件）
  - `php artisan migrate`（将迁移文件生成数据表）
  - `composer dump-autoload`（进行数据填充的准备）
  - `php artisan db:seed`（数据填充）

### 登录页面的结构

- 具体的操作方式可以看原文档，写的很详细
- 这部分我觉得比较有意思的地方就是，看loginController中，登录之后，我们的登录数据通过post方式又回传给了这个控制器里的方法，也就是说，登录部分整个操作流程就是通过url访问路由，然后到了控制器的第一个方法，然后渲染login页面，输入数据post传出数据到控制器的第二个方法。而不是我们传统的视图-数据-视图的流程。
- 传给我们的loginPost方法之后，里面进行一系列的操作，比如验证是否符合规则，然后进行用户属性的判断（is_admin)来选择是渲染哪个视图。
- 我们可以发现在定义路由的时候，这部分的中间件用到了guest及auth，这两个中间件是laravel专门为登录所设计的中间件，可以做到系统中游客与管理员的分隔，而且不会跨域访问，就是说不会以游客身份登录之后访问管理员的路径路也能够访问。
- 题外话：在许多视图中都用到了Form组件，这个组件其实是laravel中移除了的，我们需要根据具体的版本来选择具体的安装方式（主要就是composer require之类的）。还有，注意laravel版本的选择，原来用laravel 5.2版本做登录，发现两个版本根本就不是一个世界，许多中间件的定义，使用方式都不一样，因此，一定注意版本的选取。

### 主界面

#### 学生

- 编辑信息，查看分数
- 这部分似乎坑不多，主要就是form组件的使用，操作流程也就是先由路由访问控制器，再渲染视图，再将数据返回控制器进行一系列操作。
- 这里需要注意的是进行了一个自己定义的request的操作，这样一来我们可以将验证的部分放在我们自定义的request里去，可以使代码简化，具体定义方法和基本的request一样，通过artisan就可以很好的帮助我们完成
- 文件位置：App\Http\Request\
- 命令：`php artisan make:request`

#### 管理员

- 增加学生，删除学生，修改分数，成绩排名
- 进入管理员的页面后我们可以看到相关的页面渲染出来的结果，对于增加学生，坑也不多，都是和前面相似的操作。之后是修改分数，这部分的原项目的逻辑有一点问题，这个项目定义了两个模型，一个是user，一个是grade，然而grade里面只存储了当时seed文件希望填充的数据，也就是说加入我们的seed文件里没有将所有学生都录入，那么在查看分数的时候这些学生的分数自然为空，而如果我们想要添加的话，程序就会报错，告诉我们在数据库找不到相关数据，这就是导致的问题所在，没有数据存在何谈更新数据，即update_grade与添加分数没有能够结合起来。这里这个bug虽然简单，却也很恼人。
- 之后有个删除学生的操作，这里在原项目中是顺利成功的，然而在复现的时候与上面的情况类似，也是数据库会告诉我们找不到相关数据，对空对象进行操作。于是我对原项目进行了一些修改，原项目中

```public function destroy(User $user)
{
    $name = $user->name;
    $user->delete();
    session()->flash('message', $name."同学已经被移除");
    return Redirect::back();
}
```

的部分我改为了

```
public function destroy(Request $request)
    {
        $user = User::where('id', $request->id)->first();
        $name = $user->name;
        $user->delete();
        session()->flash('message', $name . '同学已经被移除');
        return Redirect::back();

    }
```

也就是改变了一下查询方式就可以了，很玄学，可能是因为在前者的查询方式中修改了某些底层文件，进行了路由绑定，而在后者我直接显示的从路由到控制器都把参数id摆了出来，之后进行查询，这样一来我们就无需修改底层文件，导致一些其他的连锁反应。

- 基本就是这些了，还有一些什么成绩排名，导出excel等都是借助了js啊，一些laravel组件啊，都是现学现用的知识，先不展开了。

## 结果

- 基本是算成功了吧
- 学到了
  - 登录，修改数据的基本操作
  - 自定义请求文件
  - 数据库的迁移填充等操作
  - form组件的使用和安装
  - artisan的基本操作，创建控制器，模型等
  - 学会简单的调试，没有什么不是一个dd不能解决
  - 严格遵循版本要求，对底层文件的修改要慎重
  - blade模板引擎是真的强大，里面插入链接也很方便，也可以用到php编程知识与视图相结合
  - 路由和中间件的基本使用
  - 杂七杂八的知识点.etc
